//Role Table
CREATE TABLE Roles (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Auto-incrementing primary key
    RoleName NVARCHAR(100), -- Role Name (Now nullable)
    RoleDescription NVARCHAR(255) NULL, -- Role Description (optional)
    
    IsActive BIT , -- Indicates if the role is active (1 = Active, 0 = Inactive)
    IsDeleted BIT , -- Indicates if the role is deleted (1 = Deleted, 0 = Not Deleted)
    
    DeletedBy NVARCHAR(50) NULL, -- User who deleted the role
    CreatedBy NVARCHAR(50) NULL, -- User who created the role (nullable)
    UpdatedBy NVARCHAR(50) NULL, -- User who last updated the role
    
    CreateDate DATETIME, -- Date and time when the role was created
    UpdateDate DATETIME -- Date and time when the role was last updated

);
    alter table Roles
Add RoleId INT

//Team

CREATE TABLE Team (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Primary Key with auto-increment
    Name VARCHAR(255), -- Name of the team
    Description VARCHAR(MAX), -- Description of the team
    IsActive BIT, -- Indicates if the team is active
    IsDeleted BIT, -- Indicates if the team is deleted
    DeletedBy INT, -- User ID of who deleted the record
    CreatedBy INT, -- User ID of who created the record
    UpdatedBy INT, -- User ID of who last updated the record
    CreateDate DATETIME, -- Record creation date
    UpdateDate DATETIME -- Last update date
);

alter table Team
Add TeamId INT
//Stored Procedure GetSubMenuAllDetails

USE [EHRM]
GO
/****** Object:  StoredProcedure [dbo].[GetSubMenuAllDetails]    Script Date: 1/7/2025 8:36:02 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[GetSubMenuAllDetails]
	(@Id INT)
AS
BEGIN


	SELECT 
    sm.Id As Id,
	sm.Action As Action,
	sm.Controller As Controller,
	mm.Id As MainMenuId,
	r.Id As RoleId,
	e.EmpId As EmployeeId,
    sm.Name AS SubMenuName,        
    mm.Name AS MainMenuName,        
    r.RoleName AS RoleName,             
    e.FirstName + ' ' + e.LastName AS EmployeeName 
FROM   SubMenu sm
Left   JOIN  MainMenu mm ON sm.MainMenuId = mm.Id  
left JOIN  Roles r ON sm.RoleId = r.Id            
left JOIN  EmployeeDetails e ON sm.EmpId = e.EmpId  
WHERE sm.IsActive = 1 and sm.Id=@Id; 
END



//Holiday

CREATE TABLE Holiday (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Primary Key with auto-increment
    TeamId INT, -- Foreign Key referencing Team table
    Name VARCHAR(255), -- Name of the holiday
    Description VARCHAR(MAX), -- Description of the holiday
    IsActive BIT, -- Indicates if the holiday is active
    IsDeleted BIT, -- Indicates if the holiday is deleted
    DeletedBy INT, -- User ID of who deleted the record
    CreatedBy VARCHAR(30), -- User ID of who created the record
    UpdatedBy VARCHAR(30), -- User ID of who last updated the record
    CreateDate DATETIME, -- Record creation date
    UpdateDate DATETIME, -- Last update date
    HolidayDate varchar(30)
    FOREIGN KEY (TeamId) REFERENCES Team(Id) ON DELETE CASCADE -- Enable cascading delete
);

//Add Probation Question

CREATE TABLE ProbationEvaluationQuestions (
    QuestionID INT IDENTITY(1,1) PRIMARY KEY, -- Unique identifier, auto-incremented
    Question NVARCHAR(MAX) NOT NULL,          -- The text of the question (supports Unicode)
    CreatedAt DATETIME,
	IsActive BIT
);


//NoticeBoard 

CREATE TABLE NoticeBoard (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Primary Key with auto-increment
    HeadingName VARCHAR(255), -- Heading of the notice
    Description VARCHAR(MAX), -- Description of the notice
    Image VARCHAR(MAX), -- Image (stored as binary data)
    IsActive BIT, -- Indicates if the notice is active
    IsDeleted BIT, -- Indicates if the notice is deleted
    DeletedBy INT, -- User ID of who deleted the record
    CreatedBy INT, -- User ID of who created the record
    UpdatedBy INT, -- User ID of who last updated the record
    CreateDate DATETIME, -- Record creation date
    UpdateDate DATETIME -- Last update date
);


//MainMenue

CREATE TABLE MainMenu (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Primary Key with auto-increment
    Name VARCHAR(255), -- Name of the menu item
    Icon VARCHAR(30), -- Icon for the menu item (optional, stored as binary data)
    IsActive BIT -- Indicates if the menu item is active
);


//SubMenu
CREATE TABLE SubMenu (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Primary Key with auto-increment
    Name VARCHAR(255), -- Name of the submenu item
    Controller VARCHAR(255), -- Controller associated with the submenu item
    Action VARCHAR(255), -- Action associated with the submenu item
    MainMenuId INT, -- Foreign Key referencing MainMenu table
    RoleId INT, -- Foreign Key referencing Role table
    EmpId INT, -- Foreign Key referencing EmployeeDetails table
    IsActive BIT, -- Indicates if the submenu item is active
    FOREIGN KEY (MainMenuId) REFERENCES MainMenu(Id) ON DELETE CASCADE, -- Foreign Key for MainMenuId
    FOREIGN KEY (RoleId) REFERENCES Roles(Id) ON DELETE CASCADE, -- Foreign Key for RoleId
    FOREIGN KEY (EmpId) REFERENCES EmployeeDetails(EmpId) ON DELETE CASCADE -- Foreign Key for EmpId
);

//EmpType

CREATE TABLE EmpType (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Primary Key with auto-increment
    EmpType VARCHAR(255), -- The type of the employee
    IsActive BIT -- Indicates if the employee type is active
);


//Post
CREATE TABLE Post (
    Id INT IDENTITY(1,1) PRIMARY KEY, -- Primary Key with auto-increment
    PostName VARCHAR(255), -- Name of the post
    TotalPosition INT, -- Total number of positions available for this post
    Description VARCHAR(MAX), -- Description of the post
    IsActive BIT -- Indicates if the post is active
);

//EmployeeDetails

CREATE TABLE EmployeeDetails (
    -- Personal Details
    ID INT PRIMARY KEY IDENTITY(1,1),         -- Auto-increment Employee ID
	PrefixName VARCHAR(6) NULL,               -- Prefix Name (e.g., Mr., Ms.)        
    EmpId INT UNIQUE NOT NULL,                -- Unique Employee Identifier
    Title NVARCHAR(50) NOT NULL,              -- Title
    FirstName NVARCHAR(100) NOT NULL,         -- First Name
    MiddleName NVARCHAR(100) NULL,            -- Middle Name
    LastName NVARCHAR(100) NOT NULL,          -- Last Name
    LoginID NVARCHAR(50) NOT NULL UNIQUE,     -- Login ID
    Password NVARCHAR(255) NOT NULL,          -- Password (hashed)
    RoleId INT NOT NULL,               -- Role
    DateOfBirth VARCHAR(30) NOT NULL,                -- Date of Birth
    Gender NVARCHAR(10) NOT NULL,             -- Gender
    MaritalStatus INT NOT NULL,      -- Marital Status
    AadharNumber NVARCHAR(20) NOT NULL UNIQUE,         -- Social Security Number
    EmailAddress NVARCHAR(255) NOT NULL UNIQUE, -- Email Address
    HomePhone NVARCHAR(15) NULL,              -- Home Phone
    CellPhone NVARCHAR(15) NOT NULL,          -- Cell Phone
    OfficePhone NVARCHAR(15) NULL,            -- Office Phone
    TeamID INT NOT NULL,                          -- Team (Foreign Key)
    MarriageAnniversary DATE NULL,            -- Marriage Anniversary
 
    -- Address Details
    Street NVARCHAR(Max) NOT NULL,            -- Local Address: Street
    City NVARCHAR(100) NOT NULL,              -- Local Address: City
    Country NVARCHAR(100) NOT NULL,           -- Local Address: Country
    ZipCode NVARCHAR(20) NULL,                -- Local Address: Zip Code
    Nationality NVARCHAR(50) NOT NULL,        -- Nationality
 
    -- Audit Information
    CreatedAt DATETIME DEFAULT GETDATE(),     -- Record Creation Date
    UpdatedAt DATETIME DEFAULT GETDATE()      -- Record Last Update Date
    Age INT,
    IsProfileCompleted BIT DEFAULT 0,
    Active BIT DEFAULT 0
    createdById INT,
);

//Asset
CREATE TABLE AssetsDb (
    Id INT PRIMARY KEY IDENTITY(1,1),
    TeamId INT,
    EmpId INT,
    Name VARCHAR(255),
    Category VARCHAR(255),  -- If it's a string, adjust the size, use VARCHAR(MAX) only for very large text
    Value INT,
    Status VARCHAR(255),
    Summary VARCHAR(MAX),  -- This is fine for large summaries
    IssueDate DATETIME,  -- Use DATETIME for storing date and time
    IsActive BIT,
    IsDeleted BIT,
    DeletedBy INT,  -- Assuming this is the ID of the user who deleted
    CreatedBy INT,  -- Assuming this is the ID of the user who created the record
    UpdatedBy INT,  -- Assuming this is the ID of the user who updated the record
    UpdateDate DATETIME  -- DATETIME is better for storing date and time
);

CREATE TABLE [EHRM].[dbo].[EmployeesCred] (
    [Id] INT IDENTITY(1,1) PRIMARY KEY, -- Auto-increment primary key
    [EmpId] NVARCHAR(50) NOT NULL, -- Employee ID
    [Email] NVARCHAR(100) NOT NULL, -- Email address
    [TempPassword] NVARCHAR(255) NOT NULL, -- Temporary password
    [FirstName] NVARCHAR(50) NOT NULL, -- First name
    [LastName] NVARCHAR(50) NOT NULL, -- Last name
    [RoleId] INT NOT NULL, -- Role ID (assuming it's an integer)
    [Active] BIT NOT NULL, -- Active status (1 for active, 0 for inactive)
    [FailedLoginAttempts] INT NOT NULL DEFAULT 0, -- Count of failed login attempts
    [IsLockedOut] BIT NOT NULL DEFAULT 0, -- Indicates if the account is locked
    [LockoutEndTime] DATETIME NULL, -- Lockout end time, null if not locked
    [LockoutDuration] INT NOT NULL DEFAULT 0 -- Lockout duration in minutes
);

CREATE TABLE EmployeesDeclaration (
   Id INT PRIMARY KEY identity(1,1),
    EmployeeName VARCHAR(100),
	EmpId int,
    Designation VARCHAR(100),
    BandLevel VARCHAR(50),
    DateOfJoining DATETIME,
    ProbationStatus VARCHAR(50),
    ProbationDate DATETIME,
    Location VARCHAR(100),
    Project VARCHAR(100),
    BloodGroup VARCHAR(10),
    DateOfBirth DATETIME,
    Age INT,
    Gender VARCHAR(10),
    SpouseFatherMotherName VARCHAR(100),
    RelationWithSpouse VARCHAR(50),
    SpouseFatherDateOfBirth DATETIME,
    MaritalStatus VARCHAR(20),
    OfficialContact VARCHAR(20),
    PersonalContact VARCHAR(20),
    OfficialEmail VARCHAR(100),
    PersonalEmail VARCHAR(100),
    TenureInRAPS INT,
    YearsInRAPS INT,
    PriorWorkExperience INT,
    TotalWorkExperience INT,
    FirstOrganisation VARCHAR(100),
    FirstOrganisationExperience INT,
    SecondOrganisation VARCHAR(100),
    SecondOrganisationExperience INT,
    ThirdOrganisation VARCHAR(100),
    ThirdOrganisationExperience INT,
    FourthOrganisation VARCHAR(100),
    FourthOrganisationExperience INT,
    Dependent1Name VARCHAR(100),
    Dependent1Relationship VARCHAR(50),
    Dependent1Dob DATETIME,
    EmergencyName1 VARCHAR(100),
    EmergencyContact1 VARCHAR(20),
    EmergencyRelationship1 VARCHAR(50),
    EmergencyName2 VARCHAR(100),
    EmergencyContact2 VARCHAR(20),
    EmergencyRelationship2 VARCHAR(50),
    XthInstitution VARCHAR(100),
    XthPassingYear VARCHAR(10),
    XiithInstitution VARCHAR(100),
    XiithPassingYear VARCHAR(10),
    BachelorInstitution VARCHAR(100),
    BachelorCompleteYear VARCHAR(4),
    BachelorDegrees VARCHAR(100),
    MasterInstitution VARCHAR(100),
    MasterCompleteYear VARCHAR(4),
    FatherHusbandName VARCHAR(100),
    UanNo VARCHAR(20),
    AdharNo VARCHAR(20),
    PanCardNo VARCHAR(20),
    BankName VARCHAR(100),
    AccountNumber VARCHAR(20),
    IfscCode VARCHAR(20),
    PermanentAddress VARCHAR(255),
    PostalAddress VARCHAR(255),
    Ctc VARCHAR(20),
    FilingPerson VARCHAR(100),
    FilingRecheck VARCHAR(10),
    ResignationDate VARCHAR(20),
    ExitDate VARCHAR(20),
    ReasonForLeaving VARCHAR(255)
  FOREIGN KEY (EmpId) REFERENCES EmployeeDetails(EmpId) ON DELETE CASCADE 
);

----------------------------------------------------------------------------------------------------------------

Scaffold-DbContext "Server=DESKTOP-S1TNCS5\SQLEXPRESS;Database=EHRM;Trusted_Connection=True;TrustServerCertificate=true" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Database
//This bellow script will be used to update the database when we add any table or column.
Scaffold-DbContext "Server=DESKTOP-S1TNCS5\SQLEXPRESS;Database=EHRM;Trusted_Connection=True;TrustServerCertificate=true" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Database -Force

-------------------------------------------------------------------------------------------------------------------
