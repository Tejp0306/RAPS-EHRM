@using EHRM.ViewModel.Employee
@model List<EmployeeViewModel>
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor


    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Manager View - Employee Overview</title>

    <!-- Bootstrap 5 CDN -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>
<link href="~/CustomStyle/ManagerPartial.css" rel="stylesheet" />
@{
    // Retrieve the title from the session (if available)
    var userTitle = Context.Session.GetString("UserTitle") ?? "Title Not Available";
}
<style>
    /* Custom modal styling */
    #punchModal .modal-dialog {
        max-width: 80%; /* Adjust width as needed */
        width: 80%; /* Ensure it takes up 80% of the screen width */
        margin: 30px auto; /* Center modal with margin */
    }

    /* Modal header styling */
    #punchModal .modal-header {
        background-color: #f8f9fa; /* Light background color */
        border-bottom: 1px solid #dee2e6;
    }

    /* Modal title styling */
    #punchModal .modal-title {
        font-weight: bold;
    }

    /* Custom button styling */
    #changeMonthBtn {
        margin-left: 10px;
    }

    /* Styling the modal body */
    #punchModal .modal-body {
        padding: 20px;
        background-color: #f1f1f1;
    }

    /* Add some margin to the table for better spacing */
    #punchTable {
        margin-top: 15px;
    }

        /* Adjust the table width */
        #punchTable th, #punchTable td {
            padding: 10px;
            text-align: center;
        }

    /* Button container in modal footer */
    .modal-footer {
        display: flex;
        justify-content: space-between;
    }

    /* Download button styling */
    #downloadXlsxBtn {
        background-color: #007bff;
        color: white;
    }

        #downloadXlsxBtn:hover {
            background-color: #0056b3;
        }
</style>
<body>
    <div class="d-flex">
        <div class="container-fluid">
            <!-- Stats Cards -->
            <div class="row g-4">
                <!-- Employee Info Card -->
                <div class="col-12 col-sm-12 col-md-4 col-lg-4 col-xl-4 mb-4">
                    <div class="stats-card stats text-white bg-info">
                        <div class="card-body">
                            <h5 class="card-title">@ViewData["Name"]</h5>
                            <p class="card-text">@userTitle</p>
                        </div>
                    </div>
                </div>

                <!-- Total Employees Card -->
                <div class="col-6 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-4">
                    <div class="stats-card stats text-white bg-warning">
                        <div class="card-body">
                            <h5 class="card-title">Total Employees</h5>
                            <p class="card-text">@Model.Count</p>
                        </div>
                    </div>
                </div>

                <!-- Employees on Leave Card -->
                <div class="col-6 col-sm-6 col-md-4 col-lg-4 col-xl-4 mb-4">
                    <div class="stats-card stats text-white bg-success">
                        <div class="card-body">
                            <h5 class="card-title">Employees on Leave</h5>
                            <p class="card-text">@ViewBag.TotalApprovedLeave</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Quick Stats -->
            <div class="row mb-4 mt-5">
                <div class="col-6 custom-leave-card mb-3">
                    <div class="card text-white bg-primary shadow-sm hover-shadow">
                        <div class="card-body text-center">
                            <h5 class="card-title"><i class="bi bi-calendar-check"></i> Earned Leave</h5>
                            <p class="card-text fs-4"><strong id="earnedLeave">0</strong></p>
                        </div>
                    </div>
                </div>

                <div class="col-6 custom-leave-card mb-3">
                    <div class="card text-white bg-warning shadow-sm hover-shadow">
                        <div class="card-body text-center">
                            <h5 class="card-title"><i class="bi bi-thermometer-half"></i> Sick Leave</h5>
                            <p class="card-text fs-4"><strong id="sickLeave">0</strong></p>
                        </div>
                    </div>
                </div>

                <div class="col-6 custom-leave-card mb-3">
                    <div class="card text-white bg-info shadow-sm hover-shadow">
                        <div class="card-body text-center">
                            <h5 class="card-title"><i class="bi bi-umbrella"></i> Casual Leave</h5>
                            <p class="card-text fs-4"><strong id="casualLeave">0</strong></p>
                        </div>
                    </div>
                </div>

                <div class="col-6 custom-leave-card mb-3">
                    <div class="card text-white bg-success shadow-sm hover-shadow">
                        <div class="card-body text-center">
                            <h5 class="card-title"><i class="bi bi-list-task"></i> Total Leave</h5>
                            <p class="card-text fs-4"><strong id="totalLeave">0</strong></p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Employee List -->
            <div class="card mt-3">
                <div class="card-body">
                    <h4 class="card-title mb-2">Employee List</h4>
                    <div style="max-height: 300px; overflow-y: auto; background-color: #f9f9f9; border-radius: 8px;">
                        @if (Model != null && Model.Count > 0)
                        {
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>S.No</th>
                                            <th>Name</th>
                                            <th>Post</th>
                                            <th>Email Address</th>
                                            <th>View (Punch-Status)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            int serialNo = 1;
                                        }
                                        @foreach (var emp in Model)
                                        {
                                            <tr>
                                                <td>@serialNo</td>
                                                <td>@emp.FirstName @emp.LastName</td>
                                                <td>@emp.Title</td>
                                                <td>@emp.EmailAddress</td>
                                                <td>
                                                    <button class="btn btn-info viewBtn" data-emp-id="@emp.EmpId" data-toggle="modal" data-target="#punchModal">View</button>
                                                </td>
                                            </tr>
                                            serialNo++;
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <p style="text-align: center; color: #555;">No employees found under this manager.</p>
                        }
                    </div>
                </div>
            </div>

            <!-- Calendar Section -->
            <div class="container-fluid mt-4" id="calendar-container">
                <h2>Calendar</h2>
                <div id="calendar"></div>
            </div>

            <!-- Performance Section -->
            <div class="mt-4">
                <div class="row">
                    <div class="col-12 col-md-6">
                        <div class="card mb-3">
                            <div class="card-body">
                                <h5>Employee Attendance</h5>
                                <p>View employee's today attendance.</p>
                                <button class="btn btn-warning" onclick="window.location.href='/Calendar/PunchStatus';">View</button>
                            </div>
                        </div>
                    </div>

                    <!-- Inject the Notice Partial Here -->
                    <div class="col-12 col-md-6">
                        @Html.Partial("_NoticePartialView")
                    </div>
                </div>
            </div>
        </div>
    </div>


    <!-- Punch Modal -->
    <div class="modal fade" id="punchModal" tabindex="-1" role="dialog" aria-labelledby="punchModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">

                <div class="modal-header">
                    <h5 class="modal-title" id="punchModalLabel">PUNCH STATUS</h5>

                    <!-- Reset Button to Change Month -->
                    <div id="changeMonthContainer" style="display: none; margin-left: auto;">
                        <button type="button" class="btn btn-warning btn-sm" id="changeMonthBtn">Change Month</button>
                </div>
                </div>

                <div class="modal-body">
                    <div class="container">
                        <!-- Month Filter Dropdown -->
                        <div id="monthSelector" class="form-group row">
                            <div class="col-md-6">
                                <label for="monthSelect">Select Month</label>
                                <select class="form-control" id="monthSelect">
                                    <option value="">-- Select Month --</option>
                                    @for (int m = 1; m <= 12; m++)
                                    {
                                        <option value="@m">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(m)</option>
                                    }
                                </select>
                            </div>

                            <!-- Year Dropdown -->
                            <div class="col-md-6">
                                <label for="yearSelect">Select Year</label>
                                <select class="form-control" id="yearSelect">
                                    @for (int y = DateTime.Now.Year - 2; y <= DateTime.Now.Year + 1; y++)
                                    {
                                        if (y == DateTime.Now.Year)
                                        {
                                            <option value="@y" selected>@y</option>
                                        }
                                        else
                                        {
                                            <option value="@y">@y</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>

                        <!-- Punch Data Table (hidden initially) -->
                        <div id="punchDataContainer" style="display: none; margin-top: 15px;">
                        <div class="table-responsive">
                            <table id="punchTable" class="table table-striped table-bordered">
                                <thead>
                                    <tr>
                                            <th>Month</th>
                                        <th>Punch Date</th>
                                        <th>Punch-In Time</th>
                                        <th>Punch-Out Time</th>
                                        <th>Total Hours</th>
                                            <th>Status (if on leave)</th>
                                    </tr>
                                </thead>
                                <tbody></tbody>
                            </table>
                        </div>
                    </div>

                </div>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-success btn-sm" id="closeModalBtn">Close</button>
                    <button type="button" class="btn btn-primary btn-sm" id="downloadXlsxBtn">Download</button>
                </div>

            </div>
        </div>
    </div>



    <!-- Birthday Modal -->
    <div class="modal fade" id="birthdayModal" tabindex="-1" aria-labelledby="birthdayModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header justify-content-center">
                    <h5 class="modal-title" id="birthdayModalLabel" style="font-size: 2.5rem; font-weight: bold; color: #FF5733; text-align: center; animation: birthdayAnimation 2s infinite;">
                        🎉 **Happy Birthday!** 🎉
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body text-center">
                    @if (TempData["EmployeeBirthday"] != null)
                    {
                        <p style="font-size: 1.2rem; font-weight: bold; color: #FF5733;">
                            Wishing <span style="color: #007bff; font-size: 1.5rem;"><b>@TempData["EmployeeBirthday"].ToString().ToUpper()</b></span>
                            a fantastic day filled with joy and celebration!!!! <br> 🎉🎂🎉
                        </p>
                        <p style="font-size: 1.1rem; color: #6c757d;">
                            May this special day bring you endless happiness, love, and success. Enjoy every moment! 🌟
                        </p>
                    }
                    else
                    {
                        <p style="font-size: 1.2rem; color: #6c757d;">
                            Oops! No birthdays today, but let's keep the spirit alive! 🎉
                        </p>
                    }
                </div>

                <div class="modal-footer justify-content-center">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal" style="font-size: 1.1rem;">Thank You!</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Event Modal -->
    <div class="modal fade" id="eventModal" tabindex="-1" aria-labelledby="eventModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="eventModalLabel">Leave Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <form id="eventForm">
                        <div class="mb-3">
                            <label for="eventDate" class="form-label">Date</label>
                            <input type="text" class="form-control" id="eventDate" readonly>
                        </div>
                        <div class="mb-3">
                            <label for="eventTitle" class="form-label">Event Title</label>
                            <input type="text" class="form-control" id="eventTitle">
                        </div>
                    </form>
                </div>

                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    

</body>
<script>
    window.onload = function() {
        // Check if TempData contains birthday info
        if ('@TempData["EmployeeBirthday"]' !== '') {
            var birthdayModal = new bootstrap.Modal(document.getElementById('birthdayModal'));
            birthdayModal.show();
        }
    }
</script>
@* <script src="~/CustomScripts/PunchStatus.js"></script> *@
<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.15/index.global.min.js'></script>
<script src="~/CustomScripts/UserPartialView.js"></script>
<script src="~/lib/fullcalendar/dist/index.global.min.js"></script>
<script src="~/lib/fullcalendar/dist/index.global.js"></script>



<!-- jQuery and Bootstrap JS (required for the modal) -->
<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
@* <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script> *@
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>


<script>
    $(document).ready(function () {
        var empId = null;

        // Open modal on View button click
        $('.viewBtn').on('click', function () {
            empId = $(this).data('emp-id');
            if (!empId) {
                alert("Employee ID is missing!");
                return;
            }

            // Reset modal
            $('#punchModal').modal('show');
            $('#monthSelect').val('');
            $('#yearSelect').val(new Date().getFullYear());
            $('#monthSelector').show();
            $('#punchDataContainer').hide();
            $('#changeMonthContainer').hide();
            $('#downloadXlsxBtn').hide();
            $('#punchTable tbody').empty(); // Clear previous data from the table
        });

        // Month/year change triggers data fetch
        $('#monthSelect, #yearSelect').on('change', function () {
            const month = $('#monthSelect').val();
            const year = $('#yearSelect').val();
            if (empId && month && year) {
                fetchPunchData(empId, month, year);
            }
        });

        // Fetch punch data by month/year
        function fetchPunchData(empId, month, year) {
            $('#monthSelector').hide();
            $('#punchDataContainer').show();
            $('#changeMonthContainer').show();

            $.ajax({
                url: '@Url.Action("GetPunch", "Calendar")',
                type: 'GET',
                data: { empId: empId, month: month, year: year },
                dataType: 'json',
                success: function (data) {
                    const tableBody = $('#punchTable tbody');
                    tableBody.empty(); // Clear the table body

                    if (Array.isArray(data) && data.length > 0) {
                        data.forEach(item => {
                            const row = `
                                <tr>
                                    <td>${item.month}</td>
                                    <td>${item.punchDate}</td>
                                    <td>${item.punchintime}</td>
                                    <td>${item.punchouttime}</td>
                                    <td>${item.totalhours}</td>
                                    <td>${item.leaveType || ''}</td>
                                </tr>`;
                            tableBody.append(row);
                        });

                        $('#downloadXlsxBtn').show();

                        // Store full response for Excel download
                        $('#downloadXlsxBtn').data('fullData', data);
                    } else {
                        alert('No punch data found.');
                    }
                },
                error: function () {
                    alert('Error fetching punch data.');
                }
            });
        }

        // Close modal
        $('#closeModalBtn').on('click', function () {
            $('#punchModal').modal('hide');
        });

        // Change month button
        $('#changeMonthBtn').on('click', function () {
            $('#monthSelector').show();
            $('#punchDataContainer').hide();
            $('#changeMonthContainer').hide();
            $('#downloadXlsxBtn').hide();
        });

        // Download Excel
        $('#downloadXlsxBtn').on('click', function () {
            const month = parseInt($('#monthSelect').val());
            const year = parseInt($('#yearSelect').val());

            if (!month || !year) {
                alert("Please select both month and year.");
                return;
                }

            const daysInMonth = new Date(year, month, 0).getDate();
            const punchData = $('#downloadXlsxBtn').data('fullData') || [];

            const punchMap = {};
            const leaveRanges = [];

            // Organize punch data and build leave ranges
            punchData.forEach(item => {
                punchMap[item.punchDate] = item;

                if (item.leaveType && item.punchDate) {
                    const leaveStart = new Date(item.punchDate);
                    const leaveTo = new Date(item.punchDate); // initially single-day leave

                    // If backend includes leaveFrom and leaveTo, use that instead
                    if (item.leaveFrom && item.leaveTo) {
                        leaveRanges.push({
                            from: new Date(item.leaveFrom),
                            to: new Date(item.leaveTo),
                            type: item.leaveType
                        });
                    } else {
                        leaveRanges.push({
                            from: leaveStart,
                            to: leaveTo,
                            type: item.leaveType
            });
                    }
                }
        });

            const headers = ['Month', 'Punch Date', 'Punch-In Time', 'Punch-Out Time', 'Total Hours', 'Leave Type'];
            const rows = [headers];

            const monthName = new Date(year, month - 1).toLocaleString('default', { month: 'long' });

            for (let day = 1; day <= daysInMonth; day++) {
                const dayStr = String(day).padStart(2, '0');
                const monthStr = String(month).padStart(2, '0');
                const dateStr = `${year}-${monthStr}-${dayStr}`;

                let row = [monthName, dateStr, '', '', '', ''];

                if (punchMap[dateStr]) {
                    const p = punchMap[dateStr];
                    row = [
                        p.month,
                        p.punchDate,
                        p.punchintime,
                        p.punchouttime,
                        p.totalhours,
                        p.leaveType || ''
                    ];
                } else {
                    // If no punch, check if this date is inside any leave range
                    const currentDate = new Date(dateStr);
                    const leaveMatch = leaveRanges.find(lr => currentDate >= lr.from && currentDate <= lr.to);
                    if (leaveMatch) {
                        row[5] = leaveMatch.type; // set Leave Type
                    }
                }

                rows.push(row);
            }

            const ws = XLSX.utils.aoa_to_sheet(rows);

            ws['!cols'] = [
                { width: 15 },
                { width: 15 },
                { width: 20 },
                { width: 20 },
                { width: 15 },
                { width: 20 }
            ];

            const wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws, "Punch Data");
            XLSX.writeFile(wb, `punch_data_${year}-${String(month).padStart(2, '0')}.xlsx`);
        });
    });
</script>