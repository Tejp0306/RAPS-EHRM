@model TenantRegistrationViewModel
@using EHRM.ViewModel.SuperAdmin
@{
	ViewData["Title"] = "TenantRegistration";
	Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<style>
	#confirmPasswordError {
		font-size: 0.875rem;
		color: red;
		margin-top: 5px;
	}

	.page-heading {
		color: #007bff;
		text-align: center;
		font-weight: bold;
		text-transform: uppercase;
		border-bottom: 2px solid #007bff;
		padding-bottom: 10px;
		margin-bottom: 20px;
		font-family: Arial, sans-serif;
	}

	.form-label {
		font-weight: bold;
	}

	.btn-custom {
		background-color: #007bff;
		color: white;
		border: none;
	}

		.btn-custom:hover {
			background-color: #0056b3;
		}

	.form-container {
		padding: 20px;
		background-color: #f9f9f9;
		border-radius: 8px;
	}

	.input-group {
		position: relative;
	}

	.input-group-text {
		position: absolute;
		right: 10px;
		top: 50%;
		transform: translateY(-50%);
		background-color: transparent;
		border: none;
	}

	#eyeIcon {
		font-size: 18px;
		color: #007bff;
	}

		#eyeIcon:hover {
			color: #0056b3;
		}

</style>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.min.js"></script>

<div class="container mt-5">
	@if (TempData["ToastType"] != null && TempData["ToastMessage"] != null)
	{
		<script type="text/javascript">
			$(document).ready(function () {
				showToast('@TempData["ToastType"]', '@TempData["ToastMessage"]');
			});
		</script>
	}
	<h2 class="page-heading">Tenant Registration</h2>
	<div class="form-container">
		<form method="post" asp-controller="SuperAdmin" asp-action="SaveTenantRegistrationForm">
			<input type="hidden" id="OrganizationID" name="id" />
			<div class="row">
				<div class="col-md-4 form-group mb-3">
					<label class="form-label" for="OrgName">Organization Name</label>
					<input asp-for="OrgName" type="text" class="form-control" id="OrgName" placeholder="Enter Name" required />
				</div>
				<div class="col-md-4 form-group mb-3">
					<label class="form-label" for="OrgType">Organization type</label>
					<input asp-for="OrgType" type="text" class="form-control" id="OrgType" placeholder="Enter Type Of Org." required />
				</div>
				<div class="col-md-4 form-group mb-3">
					<label class="form-label" for="OrgCapacity">Organization Capacity</label>
					<input asp-for="OrgCapacity" type="text" class="form-control" id="OrgCapacity" placeholder="Enter Number of Employees" required />
				</div>

			</div>

			<div class="row">
				<div class="col-md-6 form-group mb-3">
					<label class="form-label" for="Address">Address</label>
					<input asp-for="Address" type="text" class="form-control" id="Address" placeholder="Enter Address Of Org." required />
				</div>
				<div class="col-md-6 form-group mb-3">
					<label class="form-label" for="PostalCode"> Code</label>
					<input asp-for="PostalCode" type="text" class="form-control" id="PostalCode" placeholder="Enter Postal Code" required />
				</div>

			</div>

			<div class="row">


				<div class="col-md-6 form-group mb-3">
					<label class="form-label" for="City">City</label>
					<input asp-for="City" type="text" class="form-control" id="City" placeholder="Enter City Name" required />
				</div>

				<div class="col-md-6 form-group mb-3">
					<label class="form-label" for="Country">Country</label>
					<input asp-for="Country" type="text" class="form-control" id="Country" placeholder="Enter Country Name." required />
				</div>

			</div>

			<div class="row">
				<div class="col-md-6 form-group mb-3">
					<label class="form-label" for="Email">Email</label>
					<input asp-for="Email" type="email" class="form-control" id="Email" placeholder="Enter Email-Address" required autocomplete="off" />
				</div>

				<div class="col-md-6 form-group mb-3">
					<label class="form-label" for="Mobile">Mobile</label>
					<input asp-for="Mobile" type="tel" class="form-control" id="Mobile" placeholder="Enter Mobile Number" required />
				</div>
			</div>

			<div class="row">
				<div class="col-md-6 form-group mb-3">
					<label class="form-label" for="PrimaryAdminName">Primary Admin Name</label>
					<input asp-for="PrimaryAdminName" type="text" class="form-control" id="PrimaryAdminName" placeholder="Enter Admin Name" required />
				</div>
				<div class="col-md-6 form-group mb-3">
					<label class="form-label" for="AdminUsername">Admin Username</label>
					<input asp-for="AdminUsername" type="text" class="form-control" placeholder="Enter User-Name" required />
				</div>
				



			</div>

			<div class="row">
				<div class="col-md-6 form-group mb-3">
				<label class="form-label " for="Password">Password</label>
				<div class="input-group ">
					<input asp-for="PasswordHash" type="password" class="form-control" id="Password" placeholder="Enter Password" required autocomplete="off" />
					<span class="input-group-text" id="togglePassword" style="cursor: pointer;">
						<i class="bi bi-eye" id="eyeIcon"></i> <!-- Font Awesome or Bootstrap Icons -->
					</span>
				</div>
				</div>
				<div class="col-md-6 form-group mb-3">
				<label class="form-label " for="ConfirmPassword ">Confirm Password</label>
				<div class="input-group ">
					<input asp-for="ConfirmPasswordHash" type="password" class="form-control" id="ConfirmPassword" placeholder="Confirm Password" required />
					<span class="input-group-text" id="toggleConfirmPassword" style="cursor: pointer;">
						<i class="bi bi-eye" id="confirmEyeIcon"></i> <!-- Font Awesome or Bootstrap Icons -->
					</span>
				</div>
					<div id="confirmPasswordError" class="text-danger" style="display: none;">
						Password and Confirm Password do not match.
					</div>
				</div>
				
			</div>

			<button type="submit" class="btn btn-custom mt-3">Create Tenant</button>
		</form>
	</div>

</div>

<script>
	document.addEventListener('DOMContentLoaded', function () {
		// Get the form and error message elements
		var form = document.getElementById('registrationForm');
		var passwordField = document.getElementById('Password');
		var confirmPasswordField = document.getElementById('ConfirmPassword');
		var confirmPasswordError = document.getElementById('confirmPasswordError');
		var togglePassword = document.getElementById('togglePassword');
		var toggleConfirmPassword = document.getElementById('toggleConfirmPassword');

		// Check if the form is available
		if (form) {
			form.addEventListener('submit', function (event) {
				var password = passwordField.value;
				var confirmPassword = confirmPasswordField.value;

				// Check if the passwords match
				if (password !== confirmPassword) {
					// Show error message
					confirmPasswordError.style.display = "block";  // Show the error message
					event.preventDefault();  // Prevent form submission
				}
			});
		}

		// Listen for input changes and hide the error if passwords match
		passwordField.addEventListener('input', checkPasswordMatch);
		confirmPasswordField.addEventListener('input', checkPasswordMatch);

		// Function to check if passwords match and hide the error if they do
		function checkPasswordMatch() {
			var password = passwordField.value;
			var confirmPassword = confirmPasswordField.value;

			// Only show error message if both fields are filled and passwords don't match
			if (password && confirmPassword) {
				if (password === confirmPassword) {
					confirmPasswordError.style.display = "none";  // Hide the error message
				} else {
					confirmPasswordError.style.display = "block";  // Show the error message
				}
			} else {
				confirmPasswordError.style.display = "none";  // Hide the error message if either field is empty
			}
		}

		// Toggle password visibility for the password field
		if (togglePassword) {
			togglePassword.addEventListener('click', function () {
				const eyeIcon = document.getElementById('eyeIcon');
				// Toggle the type of the password field between "password" and "text"
				if (passwordField.type === "password") {
					passwordField.type = "text";
					eyeIcon.classList.remove("bi-eye");
					eyeIcon.classList.add("bi-eye-slash");
				} else {
					passwordField.type = "password";
					eyeIcon.classList.remove("bi-eye-slash");
					eyeIcon.classList.add("bi-eye");
				}
			});
		}

		// Toggle password visibility for the confirm password field
		if (toggleConfirmPassword) {
			toggleConfirmPassword.addEventListener('click', function () {
				const confirmEyeIcon = document.getElementById('confirmEyeIcon');
				// Toggle the type of the confirm password field between "password" and "text"
				if (confirmPasswordField.type === "password") {
					confirmPasswordField.type = "text";
					confirmEyeIcon.classList.remove("bi-eye");
					confirmEyeIcon.classList.add("bi-eye-slash");
				} else {
					confirmPasswordField.type = "password";
					confirmEyeIcon.classList.remove("bi-eye-slash");
					confirmEyeIcon.classList.add("bi-eye");
				}
			});
		}
	});

	// Function to pre-fill the form fields from localStorage
	function getData() {
		const tenantData = JSON.parse(localStorage.getItem('tenantData'));
		if (tenantData) {
			// Pre-fill the form fields with the tenant data
			$('#OrgName').val(tenantData.orgName);
			$('#OrganizationID').val(tenantData.organizationID); // Hidden input
			$('#OrgType').val(tenantData.orgType);
			$('#OrgCapacity').val(tenantData.orgCapacity);
			$('#Address').val(tenantData.address);
			$('#PostalCode').val(tenantData.postalCode);
			$('#City').val(tenantData.city);
			$('#Country').val(tenantData.country);
			$('#date').val(tenantData.date); // Ensure format matches the input type
			$('#Email').val(tenantData.email);
			$('#Mobile').val(tenantData.mobile);
			$('#PrimaryAdminName').val(tenantData.primaryAdminName);
			$('#AdminUsername').val(tenantData.adminUsername);
			$('#Password').val(tenantData.passwordHash); // assuming PasswordHash is what needs to be populated
			$('#ConfirmPassword').val(tenantData.confirmPasswordHash); // assuming ConfirmPasswordHash is the field name
		} else {
			console.error('No tenant data found in localStorage.');
		}
	}

	// Checking referrer and loading data if applicable
	window.onload = function () {
		const referrer = document.referrer;
		const pattern = /\/SuperAdmin\/TenantRegistration(?:\/\d+)?/;
		if (pattern.test(referrer)) {
			const referrerParts = referrer.split('/');
			const tenantId = referrerParts[referrerParts.length - 1];
			if (tenantId === "TenantRegistration") {
				// Optionally clear localStorage if needed
				// localStorage.clear();
			} else {
				getData(); // Populate the form with data if the condition doesn't match
			}
		} else {
			console.log('Referrer does not match expected pattern.');
		}
	};
</script>




